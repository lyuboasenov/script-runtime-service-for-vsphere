apiVersion: v1
kind: Namespace
metadata:
  name: script-runtime-service
  labels:
    app.kubernetes.io/name: script-runtime-service
    app.kubernetes.io/instance: script-runtime-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-settings
  namespace: script-runtime-service
data:
  settings.json: |-
    {
      "Logging": {
        "LogLevel": {
          "Default": "Trace",
          "Microsoft": "Information"
        }
      },
      "AllowedHosts": "*",
      "RunspaceProviderSettings": {
        "K8sRunspaceImageName": "{{ .Values.srs.pclirunspace_image.repository }}:{{ .Values.srs.pclirunspace_image.tag }}",
        "K8sRunspacePort": 5550,
        "K8sVerifyRunspaceApiIsAccessibleOnCreate": true,
        "RunspaceTrustedCertsConfigMapName": "trusted-ca-certs",
        "MaxNumberOfRunspaces": {{ .Values.srs.limits.max_number_runspaces }},
        "MaxRunspaceIdleTimeMinutes": {{ .Values.srs.limits.max_runspace_idle_minutes }},
        "MaxRunspaceActiveTimeMinutes": {{ .Values.srs.limits.max_runspace_active_minutes }}
      },
      "ScriptExecutionStorageSettings": {
        "ServiceScriptStorageDir": "/app/service/scriptsstore",
        "NumberOfScriptsPerUser": {{ .Values.srs.limits.script_history_records_per_user }},
        "NoOlderThanDays": 5
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: srs-setup
  namespace: script-runtime-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-configs
  namespace: script-runtime-service
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-srs-setup
  namespace: script-runtime-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-configs
subjects:
- kind: ServiceAccount
  name: srs-setup
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: srs-runspace-provider
  namespace: script-runtime-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-pods
  namespace: script-runtime-service
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "configmaps","services"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-pods_srs-runspace-provider
  namespace: script-runtime-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-pods
subjects:
- kind: ServiceAccount
  name: srs-runspace-provider
  namespace: script-runtime-service
- kind: ServiceAccount
  name: srs-admin
  namespace: script-runtime-service
---
{{ if .Values.srs.persistence }}
{{ if .Values.srs.persistence.storage_class_name }}
{{ if .Values.srs.persistence.storage_size }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: srs-scriptexecutions-pvc
  namespace: script-runtime-service
  finalizers: []
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.srs.persistence.storage_class_name }}
  resources:
    requests:
      storage: {{ .Values.srs.persistence.storage_size }}

---
{{ end }}
{{ end }}
{{ end }}
apiVersion: v1
kind: Secret
metadata:
  name: srs-adminapi-credentials
  namespace: script-runtime-service
type: Opaque
data:
  ADMIN_USER: "${ADMIN_USER}"
  ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: srs-adminapi
  name: srs-adminapi
  namespace: script-runtime-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: srs-adminapi
  template:
    metadata:
      labels:
        app: srs-adminapi
    spec:
      serviceAccountName: srs-admin
      containers:
        - image: "srs-adminapi:1.0"
          imagePullPolicy: IfNotPresent
          name: srs-adminapi
          volumeMounts:
            - name: service-settings
              mountPath: "/app/service/settings/settings.json"
              subPath: "settings.json"
              readOnly: false
            - name: sts-settings
              mountPath: "/app/service/settings/sts-settings.json"
              subPath: "sts-settings.json"
              readOnly: false
            - name: trusted-ca-certs
              mountPath: "/app/service/trusted-ca-certs"
              readOnly: false
            - name: sign-certificate
              mountPath: "/app/service/settings/sign-certs"
              readOnly: false
            - name: tls-certificate
              mountPath: "/app/service/settings/tls-certs"
              readOnly: false
          ports:
            - containerPort: 5555
              protocol: TCP
          env:
            - name: DOTNET_SYSTEM_GLOBALIZATION_INVARIANT
              value: "1"
            - name: SERVICE_SIGNING_CERTIFICATE_PATH
              value: "/app/service/settings/sign-certs/srs-sign.p12"
            - name: SERVICE_TLS_CERTIFICATE_PATH
              value: "/app/service/settings/tls-certs/tls.crt"
            - name: SERVICE_HOSTNAME
              value: "${SRSA_HOSTNAME}"
          envFrom:
            - secretRef:
                name: srs-adminapi-credentials
                optional: true
      volumes:
        - name: sign-certificate
          secret:
            secretName: srs-sign
            optional: true
        - name: tls-certificate
          secret:
            secretName: srs-tls
            optional: true
        - name: trusted-ca-certs
          configMap:
            name: trusted-ca-certs
            optional: true
        - name: service-settings
          configMap:
            name: service-settings
            optional: true
            items:
            - key: settings.json
              path: settings.json
        - name: sts-settings
          configMap:
            name: sts-settings
            optional: true
            items:
            - key: sts-settings.json
              path: sts-settings.json
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: srs-apigateway
  name: srs-apigateway
  namespace: script-runtime-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: srs-apigateway
  template:
    metadata:
      labels:
        app: srs-apigateway
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      serviceAccountName: srs-runspace-provider
      containers:
        - image: {{ .Values.srs.apigateway_image.repository }}:{{ .Values.srs.apigateway_image.tag }}
          imagePullPolicy: IfNotPresent
          name: srs-apigateway
          volumeMounts:
            - name: service-settings
              mountPath: "/app/service/settings/settings.json"
              subPath: "settings.json"
              readOnly: true
            - name: sts-settings
              mountPath: "/app/service/settings/sts-settings.json"
              subPath: "sts-settings.json"
              readOnly: true
            - name: trusted-ca-certs
              mountPath: "/app/service/trusted-ca-certs"
              readOnly: true
            - name: sign-certificate
              mountPath: "/app/service/settings/certs"
              readOnly: true
            {{ if .Values.srs.persistence }}
            {{ if .Values.srs.persistence.storage_class_name }}
            {{ if .Values.srs.persistence.storage_size }}
            - name: scriptexecutions-volume
              mountPath: "/app/service/scriptsstore"
            {{ end }}
            {{ end }}
            {{ end }}
          ports:
            - containerPort: 5050
              protocol: TCP
      volumes:
        - name: sign-certificate
          secret:
            secretName: srs-sign
        - name: trusted-ca-certs
          configMap:
            name: trusted-ca-certs
        - name: service-settings
          configMap:
            name: service-settings
            items:
            - key: settings.json
              path: settings.json
        - name: sts-settings
          configMap:
            name: sts-settings
            items:
            - key: sts-settings.json
              path: sts-settings.json
        {{ if .Values.srs.persistence }}
        {{ if .Values.srs.persistence.storage_class_name }}
        {{ if .Values.srs.persistence.storage_size }}
        - name: scriptexecutions-volume
          persistentVolumeClaim:
            claimName: srs-scriptexecutions-pvc
        {{ end }}
        {{ end }}
        {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: srs-adminapi
  namespace: script-runtime-service
spec:
  ports:
  - port: 5555
    protocol: TCP
    targetPort: 5555
  selector:
    app: srs-adminapi
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: srs-apigateway
  namespace: script-runtime-service
spec:
  ports:
  - port: 5050
    protocol: TCP
    targetPort: 5050
  selector:
    app: srs-apigateway
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: srs-ingress
  namespace: script-runtime-service
  annotations:
    kubernetes.io/ingress.allow-http: "false"
spec:
  {{ if eq .Values.srs.configure_ingress_tls true }}
  tls:
  - hosts:
    - {{ required "Specify SRS service hostname" .Values.srs.service.hostname  }}
    secretName: srs-tls
  rules:
  - host: {{ required "Specify SRS service hostname" .Values.srs.service.hostname  }}
    http:
  {{ else }}
  rules:
  - http:
      paths:
      - path: /(swagger/admin.*)
        pathType: Prefix
        backend:
          serviceName: srs-adminapi
          servicePort: 5555
      - path: /admin/(swagger.*)
        pathType: Prefix
        backend:
          serviceName: srs-adminapi
          servicePort: 5555
      - path: /(admin/.*)
        pathType: Prefix
        backend:
          serviceName: srs-adminapi
          servicePort: 5555
      - path: /(swagger/srs.*)
        pathType: Prefix
        backend:
          serviceName: srs-apigateway
          servicePort: 5050
      - path: /api/(swagger.*)
        pathType: Prefix
        backend:
          serviceName: srs-apigateway
          servicePort: 5050
      - path: /(api/.*)
        pathType: Prefix
        backend:
          serviceName: srs-apigateway
          servicePort: 5050
  {{ end }}
